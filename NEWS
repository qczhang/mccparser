;;;;;;;;;;;;;;;;;;;;;;;;;;;;; -*- Mode: Outline -*- ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NEWS
;; Copyright © 2000-01 Laboratoire de Biologie Informatique et Théorique.
;; Author           : Martin Larose
;; Created On       : Mon Aug 21 15:57:05 2000
;; Last Modified By : Martin Larose
;; Last Modified On : Thu Dec 20 09:47:58 2001
;; Update Count     : 9
;; Status           : Ok.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


* Version 1.2

** cache statement syntax changed.

To gives us the ability to choose between several types of filters, the
cache syntax is changed to this form:

      cache ( <fg> <filter> )

where:

      filter :: rmsd ( INTEGER align? <atom set>? no_hydrogen? )


** Las Vegas exploration added.

With the Las Vegas exploration in mcsym, a new statement was added.  It's
grammar is:

  exploreLV ( <fg> <filter>? <output form>? <time limit>? <backtrack size>? )

where:

  filter :: rmsd ( INTEGER align? <atom set>? no_hydrogen? )
  time limit :: time_limit ( <timelimits>+ )
  timelimits :: INTEGER seconds
              | INTEGER sec
	      | FLOAT minutes
	      | FLOAT min
	      | FLOAT hours
	      | FLOAT hr
	      | FLOAT days
	      | FLOAT d
  backtrack size :: backtrack_size ( INTEGER INTEGER )


** explore syntax changed.

Uniform output cache information inserted in explore statement.  The new
syntax is:

 explore ( <fg> <filter>? <output form>? )


** Relation (pairing/stacking) constraint added.

Its grammar is:

	 relation :: relation ( <relation definition>+ )
	 relation definition :: <ref> <res> <query>

this constraint will accept a relation only if its properties satisfies the
query.

The library expression is able to read from different input forms: pdb
files, binary files and through socket communication.  See the manual for
syntax.

The explore and restore statements can dump models in different forms: pdb
and binary files or compressed files and through socket communication.  See
the manual for syntax.

Query face operator (/) added in the grammar.  See mcsym NEWS file.

Evaluation of the parser generated structure can now be done via a Visitor
derived from MccVisitor.  The Visitor defines what has to be made for each
tree node.


* Version 1.1

Parser corrected to accept ^M lines terminators.

The parser now includes a interactive interface that can be coupled with
different kind of input buffers.  See documentation for further
explainations.


* Version 1.0

This package contains a parser for Mc-Sym scripts (.mcc).  It is based on
earlier pccts parsers, but this one uses flex and bison for a greater
portability.  The grammar is described in the manual in the docs directory.